{
  "$schema": "https://modelcontextprotocol.io/schema/mcp.json",
  "version": "1.0.0",
  "mcpServers": {
    "linear": {
      "description": "Linear issue tracking and project management",
      "transport": "http",
      "url": "https://api.linear.app/graphql",
      "authentication": {
        "type": "bearer",
        "tokenEnvVar": "LINEAR_API_KEY"
      },
      "usage": "Read user stories, feature requests, and issues from Linear"
    },
    "github": {
      "description": "GitHub Issues, PRs, and repository management",
      "transport": "http",
      "url": "https://api.github.com",
      "authentication": {
        "type": "bearer",
        "tokenEnvVar": "GITHUB_TOKEN"
      },
      "usage": "Read issues, create PRs, manage repository"
    },
    "figma": {
      "description": "Figma design files and design tokens",
      "transport": "http",
      "url": "https://api.figma.com/v1",
      "authentication": {
        "type": "bearer",
        "tokenEnvVar": "FIGMA_ACCESS_TOKEN"
      },
      "usage": "Fetch design files, export design tokens, verify design specs"
    },
    "supabase": {
      "description": "Supabase PostgreSQL database and API",
      "transport": "http",
      "url": "${SUPABASE_URL}/rest/v1",
      "authentication": {
        "type": "bearer",
        "tokenEnvVar": "SUPABASE_SERVICE_KEY"
      },
      "usage": "Database queries, schema management, RLS policies"
    },
    "sentry": {
      "description": "Sentry error tracking and performance monitoring",
      "transport": "http",
      "url": "https://sentry.io/api/0",
      "authentication": {
        "type": "bearer",
        "tokenEnvVar": "SENTRY_AUTH_TOKEN"
      },
      "usage": "Read error logs, performance metrics, user impact data"
    },
    "context7": {
      "description": "Context7 documentation and knowledge base",
      "transport": "http",
      "url": "https://api.context7.com/v1",
      "authentication": {
        "type": "bearer",
        "tokenEnvVar": "CONTEXT7_API_KEY"
      },
      "usage": "Fetch technical documentation, best practices, industry research"
    },
    "desktop-commander": {
      "description": "Desktop automation and system command execution",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-desktop-commander"],
      "usage": "Automate desktop tasks, execute system commands, manage files and processes"
    },
    "spec-workflow-mcp": {
      "description": "Specification and workflow management for structured development processes",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "spec-workflow-mcp"],
      "usage": "Manage technical specifications, workflow states, and development process tracking"
    },
    "shrimp-task-manager": {
      "description": "Advanced task breakdown and management system",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "shrimp-task-manager"],
      "usage": "Break down complex tasks, track dependencies, manage task hierarchy"
    },
    "sequential-thinking": {
      "description": "Structured problem-solving with step-by-step reasoning",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
      "usage": "Complex problem analysis, decision trees, multi-step reasoning workflows"
    },
    "playwright": {
      "description": "Playwright browser automation and E2E testing",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-playwright"],
      "usage": "Browser automation, E2E test execution, visual regression testing, UI validation"
    },
    "brave-search": {
      "description": "Brave Search API for web search capabilities",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-brave-search"],
      "env": {
        "BRAVE_API_KEY": "${BRAVE_API_KEY}"
      },
      "usage": "Search Figma Community, find open-source design systems, research UI patterns"
    },
    "memory": {
      "description": "Persistent memory for storing user preferences and learned patterns",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"],
      "usage": "Remember component library preferences, design style choices, frequently used patterns"
    },
    "puppeteer": {
      "description": "Puppeteer browser automation for screenshot and scraping",
      "transport": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-puppeteer"],
      "usage": "Capture component screenshots from documentation sites, scrape design examples"
    }
  },
  "setup": {
    "instructions": [
      "# MCP Server Setup Instructions",
      "",
      "This project uses Model Context Protocol (MCP) servers to integrate with external tools.",
      "",
      "## Required Environment Variables",
      "",
      "Create a `.env` file in the project root with the following variables:",
      "",
      "```env",
      "# Linear (https://linear.app/settings/api)",
      "LINEAR_API_KEY=your_linear_api_key",
      "",
      "# GitHub (https://github.com/settings/tokens)",
      "GITHUB_TOKEN=your_github_personal_access_token",
      "",
      "# Figma (https://www.figma.com/developers/api#access-tokens)",
      "FIGMA_ACCESS_TOKEN=your_figma_personal_access_token",
      "",
      "# Supabase (https://supabase.com/dashboard/project/_/settings/api)",
      "SUPABASE_URL=https://your-project.supabase.co",
      "SUPABASE_SERVICE_KEY=your_supabase_service_role_key",
      "",
      "# Sentry (https://sentry.io/settings/account/api/auth-tokens/)",
      "SENTRY_AUTH_TOKEN=your_sentry_auth_token",
      "",
      "# Context7 (contact your Context7 admin for API key)",
      "CONTEXT7_API_KEY=your_context7_api_key",
      "",
      "# Brave Search (https://brave.com/search/api/) - Optional for design search",
      "BRAVE_API_KEY=your_brave_search_api_key",
      "```",
      "",
      "## MCP Server Categories",
      "",
      "### HTTP-based Servers (External APIs)",
      "- **linear**: Issue tracking and project management",
      "- **github**: Repository and issue management",
      "- **figma**: Design file access and design tokens",
      "- **supabase**: Database operations",
      "- **sentry**: Error tracking and monitoring",
      "- **context7**: Documentation and knowledge base",
      "",
      "### Stdio-based Servers (Local Tools)",
      "These are automatically installed via npx when first used:",
      "",
      "- **desktop-commander**: System automation and command execution",
      "- **spec-workflow-mcp**: Specification and workflow management",
      "- **shrimp-task-manager**: Task breakdown and dependency tracking",
      "- **sequential-thinking**: Structured problem-solving and reasoning",
      "- **playwright**: Browser automation and E2E testing",
      "- **brave-search**: Web search for design resources and Figma Community",
      "- **memory**: Persistent storage for design preferences and patterns",
      "- **puppeteer**: Component screenshot capture and documentation scraping",
      "",
      "## Installing MCP Servers",
      "",
      "### HTTP Servers",
      "1. Set required environment variables in `.env`",
      "2. Ensure network access to external APIs",
      "",
      "### Stdio Servers",
      "No installation required - they auto-install via npx on first use.",
      "",
      "If you prefer to pre-install:",
      "```bash",
      "npm install -g @modelcontextprotocol/server-desktop-commander",
      "npm install -g spec-workflow-mcp",
      "npm install -g shrimp-task-manager",
      "npm install -g @modelcontextprotocol/server-sequential-thinking",
      "npm install -g @modelcontextprotocol/server-playwright",
      "npm install -g @modelcontextprotocol/server-brave-search",
      "npm install -g @modelcontextprotocol/server-memory",
      "npm install -g @modelcontextprotocol/server-puppeteer",
      "```",
      "",
      "## Testing MCP Connections",
      "",
      "### HTTP Servers",
      "```bash",
      "# Test Linear connection",
      "curl -H \"Authorization: Bearer $LINEAR_API_KEY\" https://api.linear.app/graphql -d '{\"query\":\"{ viewer { id name } }\"}'",
      "",
      "# Test GitHub connection",
      "curl -H \"Authorization: Bearer $GITHUB_TOKEN\" https://api.github.com/user",
      "",
      "# Test Figma connection",
      "curl -H \"X-Figma-Token: $FIGMA_ACCESS_TOKEN\" https://api.figma.com/v1/me",
      "",
      "# Test Supabase connection",
      "curl -H \"apikey: $SUPABASE_SERVICE_KEY\" $SUPABASE_URL/rest/v1/",
      "",
      "# Test Sentry connection",
      "curl -H \"Authorization: Bearer $SENTRY_AUTH_TOKEN\" https://sentry.io/api/0/",
      "```",
      "",
      "### Stdio Servers",
      "These are tested automatically when Claude Code invokes them.",
      "",
      "## Agent Access Matrix",
      "",
      "| Agent | MCP Servers Used |",
      "|-------|------------------|",
      "| product-manager | Linear, GitHub, shrimp-task-manager, spec-workflow-mcp |",
      "| business-analyst | Context7, Linear, sequential-thinking |",
      "| ui-ux-designer | Figma, desktop-commander |",
      "| design-from-prd | Figma, GitHub, brave-search, memory, puppeteer, sequential-thinking |",
      "| ui-visual-validator | Playwright, desktop-commander |",
      "| solution-architect | Context7, sequential-thinking, spec-workflow-mcp |",
      "| database-architect | Supabase, spec-workflow-mcp |",
      "| frontend-developer | Figma, Playwright |",
      "| backend-developer | Supabase, Sentry |",
      "| test-engineer | Playwright, shrimp-task-manager |",
      "| code-reviewer | GitHub, Sentry |",
      "",
      "## Usage in Workflow",
      "",
      "### Product Discovery Phase",
      "- **Linear/GitHub**: Fetch user stories and feature requests",
      "- **shrimp-task-manager**: Break down epic into manageable tasks",
      "- **sequential-thinking**: Analyze complex product decisions",
      "",
      "### Design Phase",
      "- **Figma**: Fetch design files and export design tokens",
      "- **desktop-commander**: Automate design asset export",
      "",
      "### Architecture Phase",
      "- **Context7**: Research best practices and patterns",
      "- **spec-workflow-mcp**: Create and manage technical specifications",
      "- **sequential-thinking**: Evaluate architectural trade-offs",
      "",
      "### Development Phase",
      "- **Supabase**: Database operations and schema management",
      "- **Playwright**: Write and execute E2E tests",
      "- **Sentry**: Monitor errors during development",
      "",
      "### Testing Phase",
      "- **Playwright**: Run comprehensive E2E test suites",
      "- **shrimp-task-manager**: Track test coverage tasks",
      "",
      "### Deployment Phase",
      "- **desktop-commander**: Execute deployment scripts",
      "- **Sentry**: Set up error tracking for production",
      "",
      "## Security Best Practices",
      "",
      "1. **Never commit `.env` file** to version control",
      "2. Add `.env` to `.gitignore`",
      "3. Use service accounts with minimal required permissions",
      "4. Rotate API keys regularly",
      "5. Use environment-specific keys (dev, staging, production)",
      "6. Stdio servers run locally - ensure they don't expose sensitive data",
      "",
      "## Troubleshooting",
      "",
      "### Stdio Server Issues",
      "- Ensure Node.js is installed (v18+)",
      "- Check npx is available: `npx --version`",
      "- Clear npx cache: `npx clear-npx-cache`",
      "",
      "### HTTP Server Issues",
      "- Verify environment variables are set",
      "- Check API tokens have not expired",
      "- Ensure tokens have required scopes/permissions",
      "",
      "### Rate Limiting",
      "- GitHub: 5000 requests/hour (authenticated)",
      "- Linear: Varies by plan",
      "- Implement caching where possible"
    ]
  }
}
